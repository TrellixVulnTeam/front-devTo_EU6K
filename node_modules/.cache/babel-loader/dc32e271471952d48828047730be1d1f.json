{"ast":null,"code":"const BASE_URL = \"https://devto-backend-rested-swan-kl.mybluemix.net\";\nexport default {\n  async authenticate(data) {\n    let result = await fetch(`${BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return await result.json();\n  },\n\n  async getAllPosts(jwtToken) {\n    let result = await fetch(`${BASE_URL}/posts`, {\n      headers: {\n        'Authorization': jwtToken\n      }\n    });\n    const resJson = await result.json();\n    return resJson.data.allPosts;\n  },\n\n  async getPostById(id, jwtToken) {\n    let result = await fetch(`${BASE_URL}/posts/${id}`, {\n      headers: {\n        'Authorization': jwtToken\n      }\n    });\n    const resJson = await result.json();\n    return resJson.data.getSinglePost;\n  },\n\n  async createPost(data, jwtToken) {\n    let response = await fetch(`${BASE_URL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': jwtToken\n      },\n      body: JSON.stringify(data)\n    });\n    const resJson = await response.json();\n    return resJson.data.posted;\n  },\n\n  async updatePost(id, data, jwtToken) {\n    let response = await fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': jwtToken\n      },\n      body: JSON.stringify(data)\n    });\n    const resJson = await response.json();\n    return resJson;\n  },\n\n  async getCommentsByPostId(id, jwtToken) {\n    let result = await fetch(`${BASE_URL}/posts/${id}`, {\n      headers: {\n        'Authorization': jwtToken\n      }\n    });\n    const resJson = await result.json();\n    return resJson.data.getSinglePost.comments;\n  },\n\n  async addComment(postId, data, jwtToken) {\n    // Add comment\n    let response = await fetch(`${BASE_URL}/comments`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': jwtToken\n      },\n      body: JSON.stringify(data)\n    });\n    const resJson = await response.json();\n    const commentId = resJson.data.postedComment._id; // Update post comments Array\n\n    let postCommentsBatch = await this.getCommentsByPostId(postId, jwtToken);\n    let postCommentsIds = postCommentsBatch.map(comment => comment._id);\n    postCommentsIds.push(commentId);\n    await this.updatePost(postId, {\n      comments: postCommentsIds\n    }, jwtToken);\n    return postCommentsIds;\n  },\n\n  async updateComment(id, data, jwtToken) {\n    let response = await fetch(`${BASE_URL}/comments/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': jwtToken\n      },\n      body: JSON.stringify(data)\n    });\n    const resJson = await response.json();\n    return resJson;\n  },\n\n  async authenticate(data) {\n    let response = await fetch(`${BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    const resJson = await response.json();\n    return resJson;\n  },\n\n  async getAllUsers(jwtToken) {\n    let result = await fetch(`${BASE_URL}/users`, {\n      headers: {\n        'Authorization': jwtToken\n      }\n    });\n    const resJson = await result.json();\n    return resJson.data.allUsers;\n  },\n\n  async getUserById(id, jwtToken) {\n    let result = await fetch(`${BASE_URL}/users/${id}`, {\n      headers: {\n        'Authorization': jwtToken\n      }\n    });\n    const resJson = await result.json();\n    return resJson;\n  }\n\n};","map":{"version":3,"sources":["/home/ubaldo/Escritorio/front-devTo/src/lib/api.js"],"names":["BASE_URL","authenticate","data","result","fetch","method","headers","body","JSON","stringify","json","getAllPosts","jwtToken","resJson","allPosts","getPostById","id","getSinglePost","createPost","response","posted","updatePost","getCommentsByPostId","comments","addComment","postId","commentId","postedComment","_id","postCommentsBatch","postCommentsIds","map","comment","push","updateComment","getAllUsers","allUsers","getUserById"],"mappings":"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","sourcesContent":["const BASE_URL = \"https://devto-backend-rested-swan-kl.mybluemix.net\"\n\nexport default{\n    async authenticate(data){\n        let result = await fetch(`${BASE_URL}/auth/login`,{\n            method: \"POST\",\n            headers:{\n                'Content-Type':'application/json'            },\n            body: JSON.stringify(data)\n        })\n        return await result.json()\n    },\n    async getAllPosts(jwtToken){\n        let result = await fetch(`${BASE_URL}/posts`,{\n            headers:{\n                'Authorization': jwtToken\n            }\n        })\n        const resJson = await result.json()\n        return resJson.data.allPosts\n    },\n    async getPostById(id, jwtToken){\n\n        let result = await fetch(`${BASE_URL}/posts/${id}`,{\n            headers:{\n                'Authorization': jwtToken\n            }\n        })\n        const resJson = await result.json()\n        return resJson.data.getSinglePost\n    },\n    async createPost(data, jwtToken){\n\n        let response = await fetch(`${BASE_URL}/posts`,{\n            method: \"POST\",\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization': jwtToken\n            },\n            body: JSON.stringify(data)\n        })\n        const resJson = await response.json()\n        return resJson.data.posted\n\n    },\n    async updatePost(id, data, jwtToken){\n\n        let response = await fetch(`${BASE_URL}/posts/${id}`,{\n            method: \"PATCH\",\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization': jwtToken\n            },\n            body: JSON.stringify(data)\n        })\n        const resJson = await response.json()\n        return resJson\n    },\n    async getCommentsByPostId(id, jwtToken){\n        \n        let result = await fetch(`${BASE_URL}/posts/${id}`,{\n            headers:{\n                'Authorization': jwtToken\n            }\n        })\n        const resJson = await result.json()\n        return resJson.data.getSinglePost.comments\n    },\n    async addComment(postId, data, jwtToken){\n        // Add comment\n        let response = await fetch(`${BASE_URL}/comments`,{\n            method: \"POST\",\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization': jwtToken\n            },\n            body: JSON.stringify(data)\n        })\n        const resJson = await response.json()\n        const commentId = resJson.data.postedComment._id\n        // Update post comments Array\n        let postCommentsBatch = await this.getCommentsByPostId(postId, jwtToken)\n        let postCommentsIds = postCommentsBatch.map(comment => comment._id ) \n        postCommentsIds.push(commentId)\n        await this.updatePost(postId, {comments:postCommentsIds}, jwtToken)\n        return postCommentsIds\n    },\n    async updateComment(id, data, jwtToken){\n\n        let response = await fetch(`${BASE_URL}/comments/${id}`,{\n            method: \"PATCH\",\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization': jwtToken\n            },\n            body: JSON.stringify(data)\n        })\n        const resJson = await response.json()\n        return resJson\n        \n    },\n    async authenticate(data){\n       \n        let response = await fetch(`${BASE_URL}/auth/login`,{\n            method: \"POST\",\n            headers:{\n                'Content-Type':'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n        const resJson = await response.json()\n        return resJson\n\n    },\n    async getAllUsers(jwtToken){\n        let result = await fetch(`${BASE_URL}/users`,{\n            headers:{\n                'Authorization': jwtToken\n            }\n        })\n        const resJson = await result.json()\n        return resJson.data.allUsers\n    },\n    async getUserById(id, jwtToken){\n\n        let result = await fetch(`${BASE_URL}/users/${id}`,{\n            headers:{\n                'Authorization': jwtToken\n            }\n        })\n        const resJson = await result.json()\n        return resJson\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}